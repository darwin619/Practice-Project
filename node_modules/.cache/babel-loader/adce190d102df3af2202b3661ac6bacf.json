{"ast":null,"code":"import _objectSpread from \"/Users/mrluciferous/Desktop/Projects/practice-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport ApodActionTypes from './apod-actions';\nconst INITIAL_STATE = {\n  isFetching: false,\n  apod: [],\n  errorMessage: null\n};\n\nconst apodReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ApodActionTypes.FETCH_APOD_DATA_START:\n      {\n        return _objectSpread({}, state, {\n          isFetching: true\n        });\n      }\n\n    case ApodActionTypes.FETCH_APOD_DATA_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isFetching: false,\n          apod: action.payload\n        });\n      }\n\n    case ApodActionTypes.FETCH_APOD_DATA_ERROR:\n      {\n        return _objectSpread({}, state, {\n          errorMessage: action.payload\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default apodReducer;","map":{"version":3,"sources":["/Users/mrluciferous/Desktop/Projects/practice-project/src/Redux/Apod/apod-reducer.js"],"names":["ApodActionTypes","INITIAL_STATE","isFetching","apod","errorMessage","apodReducer","state","action","type","FETCH_APOD_DATA_START","FETCH_APOD_DATA_SUCCESS","payload","FETCH_APOD_DATA_ERROR"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,gBAA5B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,UAAU,EAAE,KADM;AAElBC,EAAAA,IAAI,EAAE,EAFY;AAGlBC,EAAAA,YAAY,EAAE;AAHI,CAAtB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACL,aAAP,EAAsBM,MAAtB,KAAiC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,eAAe,CAACS,qBAArB;AAA4C;AACxC,iCAAYH,KAAZ;AAAmBJ,UAAAA,UAAU,EAAE;AAA/B;AACH;;AACD,SAAKF,eAAe,CAACU,uBAArB;AAA8C;AAC1C,iCAAYJ,KAAZ;AAAmBJ,UAAAA,UAAU,EAAE,KAA/B;AAAsCC,UAAAA,IAAI,EAAEI,MAAM,CAACI;AAAnD;AACH;;AACD,SAAKX,eAAe,CAACY,qBAArB;AAA4C;AACxC,iCAAYN,KAAZ;AAAmBF,UAAAA,YAAY,EAAEG,MAAM,CAACI;AAAxC;AACH;;AACD;AAAU;AACN,eAAOL,KAAP;AACH;AAZL;AAcH,CAfD;;AAiBA,eAAeD,WAAf","sourcesContent":["import ApodActionTypes from './apod-actions';\n\nconst INITIAL_STATE = {\n    isFetching: false,\n    apod: [],\n    errorMessage: null\n}\n\nconst apodReducer = (state=INITIAL_STATE, action) => {\n    switch(action.type) {\n        case ApodActionTypes.FETCH_APOD_DATA_START: {\n            return { ...state, isFetching: true}\n        }\n        case ApodActionTypes.FETCH_APOD_DATA_SUCCESS: {\n            return { ...state, isFetching: false, apod: action.payload }\n        }\n        case ApodActionTypes.FETCH_APOD_DATA_ERROR: {\n            return { ...state, errorMessage: action.payload }\n        }\n        default : {\n            return state;\n        }\n    }\n}\n\nexport default apodReducer;"]},"metadata":{},"sourceType":"module"}